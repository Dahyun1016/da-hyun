# 10-1 버전 되돌리기 reset

## 버전 되돌리기 reset과 옵션

기능 reset 이해

커밋 이력에서 이전 특정 커밋으로 완전히 되돌아가는 방법

- 이동되는 해당 커밋 이후의 이력은 모두 사라지므로 주의
- → 새로운 커밋 생성 x
- 깃 저장소는 이전 커밋 내용으로 수정
- → 다만 reset 이전에 있던 작업 폴더와 스테이지 영역 내용을 어떻게 유지할지가 관건

reset의 옵션

—hard , —mixed , —soft

- 깃 저장에소는 반드시 복사
- git reset —hard HEAD~ / commit ID → 이동되는 커밋의 내용으로 작업 폴더와 스테이지 영역 , 깃 저장소를 모두 복사
- git reset HEAD ~ / commit ID → 아래와 동일
- git —miexed HEAD~ / commit ID → 이동되는 커밋의 내용으로 스테이지 영역과 깃 저장소 두 부분에 복사, 작업 폴더는 이전 내용 그대로 남음
- git reset —soft HEAD~ / commit ID → 이동되는 커밋의 내용으로 깃 저장소에만 복사, 스테이지 영역과 작업 폴더는 이전 내용 그대로 남음

—hard

git reset —hard HEAD~ 

- 지정된 HEAD~ 의 내용으로 작업 폴더와 스테이지 깃 영역, 깃 저장소가 모두 복사 , 수정
- → reset 전에 있던 작업 폴더와 스테이지 영역에 작업 내용이 모두 사라지므로 주의 필요

git reset —hard HEAD~2

- 지정된 HEAD~2 의 내용으로 작업 폴더와 스테이지 영역 , 깃 저장소가 모두 복사 수정
- → reset 전에 있던 작업 폴더와 스테이지 영역에 작업 내용이 모두 사라지므로 주의가 필요

—mixed

git reset —mixed HEAD~

- 지정된 HEAD~ 의 내용으로 스테이지 영역과 깃 저장소가 모두 복사,수정
- → 커밋 메시지 로그 이력과 함께 당시 스테이지 영역, 깃 저장소 내용이 모두 사라짐
- → 단, 작업 폴더의 내용은 이전 그대로 남음

—mixed는 기본 옵션으로 [ git reset ] 과 동일

→ 옵션 —mixed는 옵션이 없는 것과 같음

—soft

git reset —soft HEAD~

- 지정된 HEAD~ 의 내용으로 깃 저장소만 복사 , 수정
- 커밋 메시지의 로그 이력은 사라짐
- → 작업 폴더와 스테이지 영역의 내용이 모두 이전 그대로 남음

## reset 정리, checkout과 reset 비교

reset의 3가지 방식

git reset —옵션 commit ID

- —hard
- → 인자인 커밋 깃 저장소의 내용을 작업 폴더와 스테이지 영역, 그리고 깃 저장소에 모두 복사 수정 (3)
- —mixed
- → 기본 옵션으로 스테이지 영역과 깃 저장소 두 곳에 복사 수정 (2)
- —soft
- → 깃 저장소에만 복사 , 수정 하므로 **작업 폴더와 스테이지 영역은 이전 내용이 그대로 남음** (1)

커밋 되돌리기

git reset <옵션> <돌아가고 싶은 커밋>

- hard , mixed , soft 세가지
- —soft
- → 바로 다시 커밋할 수 있는 상태로 남아있음
- → **다시 마지막 이전 head로 돌아가려면 commit 만 필요**

- —mixed
- → 이력은 되돌려지고 , 인덱스도 되돌가는 커밋의 내용으로 초기화
- → 다시 마지막 이전 head로 돌아가려면 add ,commit이 필요

- —hard
- → 돌아가려는 이력 이후의 모둔 내용을 삭제
- → 다시 마지막 이전 head로 돌아가려면 파일수정,add,commit 필요

reset 후 다시 바로 이전 상태로 되돌아가기

‘ORIG_HEAD’ 이용하면 매우 간단

→ 바로 이전 커밋 참조

→ git reset —hard ORIG_HEAD

reset과 checkout 비교

git reset 9033

→ 브랜치의 마지막 커밋을 수정하는 명령

git checkout 9903

→ HEAD 포인터를 브랜치 마지막 커밋 이전으로 이동하는 명령

summary

HEAD~2 작업 디렉토리 | 스테이지 영역 | 깃 저장소 에 복사

→ 작업 디렉토리,스테이지 영역, 깃 저장소 : git reset —hard HEAD~2

→ 스테이지영역, 깃 저장소 : git reset —mixed HEAD~1

→ 깃 저장소 : git reset —soft HEAD~2

이전에 수정한 reset을 바로 취소하는 명령

git reset —hard ORIG_HEAD

---

# 10-2 [실습] 버전 되돌리기 reset

버전 되돌리기 reset 전에 수행

버전 되돌리기를 하면 현재 상태가 모두 제거되므로 

 현재의 작업 디렉토리와 스테이징 영역을 임시 저장에 저장

→ git stash

저장 확인

→ git stash list

현재 상태 확인

→ git status

작업 디렉토리와 스테이징 영역 수정

3회 커밋과 이후의 다음 상태로 복원

- 작업 폴더와 스테이징 영역을 임시 저장에 저장해 놓았음
- 임시 저장을 다시 불러오면 됨
- → 스테이징 영역까지 복원하려면 옵션 —index 사용

- git stash apply —index

---

# 10-3 커밋 취소 revert

## 커밋 취소 revert

커밋 취소 revert

undo와 비슷한 기능

- 지정한 특정 커밋을 취소해 바로 이전 상태로 되돌리는 방법
- reset과 다르게 커밋할 것이 없고, 작업 영역이 깨끗해야 수행 가능
- → Nothing to commit , working tree clean
- → 커밋해온 모든 변경 사항들을 rollback
- → 이전의 커밋 히스토리는 그대로 유지, 되돌리는 새로운 커밋이 그 이후에 추가

revert 충돌과 해결

인자가 HEAD~ 와 같이 HEAD 이전을  취소하면 충돌이 발행할 수 있음

- 충돌이 발생하지 않으려면
- 바로 이전 취소를 여러번 계속 → 마치 워드 프로세서에서 취소 [ctrl + z]를 여러 번 하는 것과 비슷

충돌해결 방법

1. 파일수정
2. git add file
3. git revert —continue

옵션 —no -edit

추가되는 커밋 메세지가 자동으로 ‘Revert’ “이전 커밋 메시지”로 지정

| git revert HEAD~ | commit ID | 이동되는 커밋의 내용으로 작업 폴더와 스테이지 영역, 깃 저장소를 모두 복사하고 커밋 메시지를 수정하도록 편집기가 실행됨 |
| --- | --- |
| git revert HEAD~ | commit ID —no -edit  | 옵션 —no -edit 으로 편집기 실행 없이 커밋 메시지가 자동으로 ‘Revert’ 이전 커밋 메시지로 지정되어 있어 새로운 커밋 생성 |

오류가 발생해 revert가 취소

커밋할 것이 있고 작업 영역이 깨끗하지 않으면 오류

→ Nothing to commit, working tree clean

해결방법

커밋을 하고 다시 revert 하는 방법

- → 현재 커밋 내용으로 작업 폴더와 , 스테이지 영역 , 깃 저장소를 모두 복사 , 수정
- → 수정한 내용 사라짐

git reset —hard HEAD~

- 이전 커밋 내용으로 작업 폴더와 스테이지 영역, 깃 저장소를 모두 복사 ,수정
- → 수정한 내용이 사라지고 , 현재 커밋 로그도 삭제

revert로 HEAD 바로 이전 상태로 돌아가기

취소 인자를 HEAD로 사용 

- git revert HEAD : 기본 편집기에서 커밋 메시지 편집 화면 실행
- git revert HEAD —no -edit : 편집 화면 실행없이 자동 커밋 메시지로 커밋 revert “이전 메시지”

## reset vs revert 비교

reset vs revert

- [ ]  되돌리기와 취소
- [ ]  revert : 지정된 이전 커밋을 취소하는 커밋이 생성
- [ ]  reset : 지정된 이전 커밋으로 이동

되돌리기, 재설정 reset 

- 특정 커밋으로 **되돌아가고 그 이후의 로그 이력은 모두 제거**

커밋 취소 revert

- 특정 커밋을 **취소하는 새로운 커밋 생성, 이전 모든 이력은 그대로 남음**

| 항목 | reset | revert |
| --- | --- | --- |
| 기능 | 이전 커밋 상태로 이동 | 이전 커밋을 취소해 그 전 상태로 이동 |
| 새로운 커밋 | 없음 | 있음 |
| 이전 커밋 이력 | 삭제 | 유지 |
| 커밋할 것 없고 작업트리 클린 | 상관 x | 깨끗해야함 |
| 충돌 발생 | 없음 | 발생할 수 있음 |
| 충돌 해결 | - | add 후 commit 혹은 —continue |
| 옵션 | —hard , —mixed , —soft | —continue , —abort , —no -edit , -n | —no -commit |

summary

취소 revert 전체 조건

nothing to commit , working tree clean > 커밋할 것 없고 작업트리 클린

HEAD를 취소해 HEAD~ 상태로 가는 커밋 생성

git revert HEAD

git revert HEAD —no -edit
