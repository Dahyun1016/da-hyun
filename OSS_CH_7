# 7-1 오픈소스 소프트웨어

## 오픈소스 소프트웨어

oss : open source software 오픈소스

- 누구나 특별한 제한 없이 코드를 보고 사용할 수 있는 오픈 소스 라이선스를 만족하는 sw
- 소스코드를 공개 , 공개 소스의 복제도 가능

open source initative ( osi ) 

opensource.org

공개 소스 정의의 관리 및 촉진을 담당하는 비영리 조합

자유 소프트웨어 (free software)

- 리처드 스톨먼 자유 소프트웨어 재단 설립
- GNU 프로젝트와 관련된 소프트웨어에서 자유를 중시
- 카피레프트 : 제작자에게 저작권은 인정하면서 누구나 sw를 복제해 사용 할 수 있는 권리를 주어야 한다는 개념을 갖는 sw의미
- 공개된 무료 유닉스 운영체제
- oss가 자유 소프트웨어에서 나온 오픈소스 소프트웨어

오픈소스 방식의 의미

오픈소스 지원 관리 서버

- 소스코드를 통해 여러 개발자가 협업하고 공유하며 이를 지원하는 방안을 마련
- 오픈소스 커뮤니티 내의 사고 및 협업 양식

협업 방식

- 서로 간에 소스코드를 사용 , 변경 및 공유할 수 있도록 커뮤니티 프로덕션과 동료 평가에 의존
- 개발자들은 혁신적인 솔루션을 만들기 위해 인사이트 , ටㅏ이디어  및 코드 공유
- 모든 사용자가 수정 ,개선 및 재분배 할 수 있도록 보장
- 대규모 협업의 기본 원칙으로 운용

장점

- 누구든 보다 쉽게 연구하여 새로운 프로그래밍 기술을 개발
- 커스터마이징과 혁신 지원

단점

- 공개의 의무
- 품질보증 및 유지보수 보안 등의 어려움

오픈소스 개발 모델

LAMP : 대부분의 웹을 지원하는 서비스 스택 모델

- Linux : 오픈소스 운영체제이자 세계 최대 규모의 오픈소스 프로젝트
- apache : 초기 웹에서 핵심 역할을 한 오픈소스 크로스 플랫폼 웹 서버
- MySql : 대부분 db 기반 웹 애플리케이션에서 사용하는 오픈소스 관계형 데이터베이스 관리 시스템
- PHP : 소프트웨어 개발에 사용되는 범용 스크립팅 언어

빅데이터 , 인공지능 분야

- Python
- Scikit-learn
- Tensorflow
- Pytorch

다양한 오픈소스 개발 모델

- Android 모바일 os
- mozila firefox 웹 브라우저
- open office , libreoffice
- 버전 제어 시스템인 git

---

## 오픈소스 소프트웨어 저작권

오픈소스 소프트웨어 라이선스 종류

- GNU General Public
- MIT License
- Apache
- BSD
- MySQL
- SUSE
- Ubuntu

소스코드 반환 의무

GPL,AGPL,LGPL,MPL,EPL 등

- 링크되거나 코드가 포함된 SW의 소스코드를 공개
- 특허 , 영업비밀 , 핵심 기술 등이 외부로 유출될 가능성이 있으니 주의
- 저작권 고지의무

GPL ( GNU - General Public License )

자유소프트웨어재단에서 만든 라이선스

- 자유소프트웨어재단 설립자인 리처드 스톨만
- 카피레프트
- 목적이나 형태 제한 없이 사용 가능ㅇ
- 수정하고 배포하는 모든 경우에 무조건 GPL로 공개 [ gpl 라이센스 명시 ]

AGPL ( GNU - Affero GPL )

GPL을 기반으로 만든 라이선스

- 네트워크로 상호작용 하는 소프트웨어의 소스코드도 공개해야 한다는 조항을 추가한 라이선스
- 서버에서 프로그램을 실행해서 다른 사용자들과 통신 중 [ 사용자들이 다운로드 할 수 있도록 해야하는 조항을 포함 ]

LGPL ( GNU - Lesser GPL )

보다 완화된 GPL 라이선스

- 실무에서 사용되기 어려운 점을 보완하기 위해서 만들어진 라이선스
- Lesser GPL로 명칭 변경

Apache License

- 소스코드 공개에 대한 의무사항은 라이센스에 포함되어 있지 않음

MIT License

- MIT에서 학생들을 지원하기 위해서 만든 라이센스
- 라이센스와 저작권 관련 명시 의무
- 가장 느슨한 조건을 가지고 있어서 많은 사람들이 사용하기 용이함

| 카테고리 | 소스코드 공개 의무 | 사례 |
| --- | --- | --- |
| Strong copy | 2차 저작물 소스코드 공개 의무 ㅇ | GPL |
| Weak copyleft | 특정 조건에서 2차 저작물 소스코드 공개 의무 없음 | LGPL |
| Non copyleft | 2차 저작물 소스코드 공개 의무 없음 | Apache. , BSD , MIT |

---

# 7-2 임시저장 stash

## 깃 4영역과 임시 저장 개요

### 깃 4영역 : 깃 3영역 + stash 영역

Git stash : 놓다 , 남겨두다 , 감추다 , 안전한 곳에 숨겨두다

커밋할 필요 없이 파일의 변경 사항을 숨기거나 비밀리에 저장할 수 있는 강력한 도구

- 작업 디렉토리와 스테이징 영역의 원래의 내용을 stash 스택에 저장
- 작업 디렉토리와 스테이징 영역의 값을 깃 저장소의 마지막 커밋 내용으로 복사

따로 안전한 곳에 저장했다가 다시 가져올 수 있는 기능

Stash 저장 구조

깃에서 임시저장소(스택 구조)에 저장

- Stack of git stashes
- 가장 최근의 내용이 가장 위에 저장되는 구조

Git stash 필요성

브랜치 이동 또는 이전 커밋으로 이동하려면 커밋할게 없고 , 작업트리 clean 해야함

But 수정한 내용이 있거나 커밋할 게 있는 상황에서 다른 브랜치 이동 혹은 이전 커밋으로 이동하려면 현재 작업 공간의 수정 내용과 인덱스의 내용을 보관할 필요가 있음, —> 나중에 다시 사용하기 위해

stash 저장되는 내용

작업 디렉토리 내용과 스테이징 영역 내용이 stash 저장 , 작업 디렉토리 내용과 스테이징 영역 내용이 최신 커밋 자료로 남음

## 임시 저장 명령 stash

작업 폴더와 스테이징 영역을 stash에 저장하고 작업 폴더를 정리

- git stash
- git stash -m ‘메시지’
- git stash save
- git stash save ‘메시지’

옵션

- —keep -index , -k 스테이징 영역은 제외하고 작업 디렉토리더만 저장 ( 작업 디렉토리는 스테이징 영역의 내용으로 )
- —include -untracked , -u     Untracked 파일도 포함해 저장

최근 임시저장 내용을 가져와 반영 , stash 목록은 그대로

기본으로 작업 디렉토리 내용만 다시 복사해 활용

- git stash apply

스테이지 영역도 함께 복사하기 위해서는 옵션 사용

- git stash apply —index

주요 옵션

옵션 -k | —keep -index

- 스테이징 영역은 저장하지 않고 그대로 놔둠
- 그러므로 checkout 할 수는 없음

옵션 -u | —include -untracked 

- Untracked파일도 포함해 저장

옵션 -p | —patch

- 변경된 모든 사항들 저장 x 대화형 프롬프트를 통해 자신이 stash에 저장할 것과 저장 ㄴㄴ 것 지정 가능

stash 목록 보기

- git stash list

stash @{0} >>> 가장 최신 것이 0번

stash @{1}

stash @{2}

…

특정 stash 확인

커밋 자료와 최신 stash 항목 간의 차이로 표시

- git stash show
- git stash show -p : (-p:  파일 내용의 차이까지 보이기)

커밋 자료와 해당 stash 항목 간의 차이로 표시

- git stash show stash@{n}
- git stash show stash@{n} -p : 내용의 차이까지 보이기

임시 저장된 stash 반영

최근 또는 지정된 임시저장소 내용을 가져와 반영하고 삭제

- git stash pop
- git stash pop stash @{n}

최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리만 반영 , stash 목록은 그대로

- git stash apply
- git stash apply stash @{n}

최근 또는 지정된 임시저장소 내용을 가져와 반영, 작업 디렉토리와 스테이징 영역도 반영 , stash 목록은 그대로

- git stash apply —index
- git stash apply —index stash @{n}

특정 stash 삭제와 모든 stash 삭제

최근 임시저장 내용을 삭제

- git stash drop

저장된 임시저장 내용을 삭제

- git stash drop stash @{n}

모든 stash 목록을 모두 제거

- git stash clear

Untracked 파일 삭제

- git clean
- git clean -i
- git clean -f —> 무조건 삭제
