# CSV 파일을 읽기 위해 csv 모듈을 import합니다.
import csv

# 'subwayfee.csv' 파일을 'cp949' 인코딩으로 엽니다.
f = open('subwayfee.csv', encoding='cp949')

# CSV 파일의 내용을 읽기 위해 csv.reader를 사용합니다.
data = csv.reader(f)

# 첫 번째 행을 헤더로 저장합니다.
header = next(data)

# 최대 승차 인원과 해당 역을 기록할 리스트를 초기화합니다.
max_station = ['', '', '', '']
max_people = [0 for _ in range(4)]

# 유임승차, 유임하차, 무임승차, 무임하차를 나타내는 라벨을 정의합니다.
label = ['유임승차', '유임하차', '무임승차', '무임하차']

# 데이터를 반복하면서 최대 승차 인원을 찾습니다.
for row in data:
    # 각 열에 대한 처리를 수행합니다. 인덱스 4, 5, 6, 7은 유임승차, 유임하차, 무임승차, 무임하차를 나타냅니다.
    for i in range(4, 8):
        # 문자열로 표현된 숫자에서 쉼표를 제거하고 정수로 변환합니다.
        row[i] = int(row[i].replace(',', ''))
        # 최대값을 비교하여 업데이트합니다.
        if row[i] > max_people[i - 4]:
            max_people[i - 4] = row[i]
            max_station[i - 4] = row[3] + ' ' + row[1]

# 파일을 닫습니다.
f.close()

# 최대 승차 인원과 해당 역을 출력합니다.
for i in range(4):
    print(label[i] + ' : ' + max_station[i] + ':', max_people[i], '명')

**`max_people = [0 for _ in range(4)]`**는 리스트 컴프리헨션을 사용하여 0으로 초기화된 길이가 4인 리스트를 생성하는 코드입니다.

여기서 사용된 각 구성 요소의 의미는 다음과 같습니다:

- **`[0 for _ in range(4)]`**: 0으로 초기화된 값을 가지는 리스트를 생성합니다.
- **`for _ in range(4)`**: 0부터 3까지의 인덱스를 가지는 범위를 반복합니다. **`_`**는 변수를 사용하지 않을 경우에 관례적으로 사용되는 이름으로, 실제로 사용되지 않는 변수를 나타냅니다. 이 경우에는 반복 횟수에만 관심이 있기 때문에 변수의 값을 사용하지 않습니다.

따라서 **`max_people`**은 길이가 4이고 모든 요소가 0으로 초기화된 리스트가 됩니다. 이 리스트는 이후에 최대 승차 인원을 저장하기 위한 용도로 사용됩니다.



# CSV 파일을 읽기 위해 csv 모듈을 import합니다.
import csv

# 'subwaytime.csv' 파일을 'cp949' 인코딩으로 엽니다.
f = open('subwaytime.csv', encoding='cp949')

# CSV 파일의 내용을 읽기 위해 csv.reader를 사용합니다.
data = csv.reader(f)

# 헤더를 읽고 다음 행을 건너뜁니다.
header = next(data)
next(data)

# 결과를 저장할 빈 리스트를 생성합니다.
result = []

# 데이터를 처리하면서 승차 인원 정보를 추출합니다.
for row in data:
    # 4번 인덱스부터 51번 인덱스까지의 데이터에 있는 쉼표를 제거합니다.
    for i in range(4, 52):
        row[i] = row[i].replace(',', '')
    
    # 문자열로 되어 있는 숫자를 정수로 변환합니다.
    row[4:] = map(int, row[4:])
    
    # 승차 인원 정보 중 10번 인덱스의 데이터를 결과 리스트에 추가합니다.
    result.append(row[10])

# 파일을 닫습니다.
f.close()

# 결과 리스트를 오름차순으로 정렬합니다.
result.sort()
# 내림차순으로 정렬하려면 주석을 해제하고 위의 코드를 주석 처리합니다.
# result.sort(reverse=True)

# 시각화를 위해 필요한 라이브러리를 import합니다.
import matplotlib.pyplot as plt

# 한글 폰트를 설정합니다.
plt.rc('font', family='Malgun Gothic')

# 그래프의 크기를 설정합니다.
plt.figure(figsize=(10, 3))

# 막대 그래프를 생성합니다.
plt.bar(range(len(result)), result)

# x축과 y축에 라벨을 추가합니다.
plt.xlabel('역')
plt.ylabel('승차 인원수')

# 그리드를 표시합니다.
plt.grid(True)

# 그래프를 출력합니다.
plt.show()
