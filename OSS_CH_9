# 9-1 브랜치 리베이스 rebase

## 병합 rebase

3-way 상태에서 base의 이해

‘master’ 브랜치 커밋 B에서 분기되는 ‘bugfix’ 브랜치

- 커밋 B
- 현재 master와 bugfix의 공통 조상
- → 이를 base라 칭함

선형적 통합 rebase 이해

브랜치 bugfix에서 base를 바꾸는 재배치 하기 이전

- git rebase master

**재배치 rebase 병합 수행**

- base를 수정
- B에서 마스터의 최신 커밋인 D로 수정
- → D 이후에 bugfix를 배치
- 이후 다시 fast forward 병합 수행 : 이 병합을 직접 다시 해야함
- ‘master’ 브랜치의 HEAD가 ‘bugfix’브랜치 마지막 커밋으로 이동
- → 로그 이력이 분기 없이 하나의 줄기로 이어짐

rebase를 이용한 브랜치 병합 과정

fast-forward 병합 방식

- master 브랜치 뒤로 bugfix 브랜치의 이력이 이동
- 이력이 하나의 줄기로 이어짐
- 충돌 발생이 가능

마스터 브랜치의 위치를 변경하기 위해서는

- master 브랜치에서 bugfix 브랜치를 fast forward 병합 필요

Rebase에서의 충돌

충돌 발생 가능

→ 각각의 커밋에서 발생한 충돌 내용을 수정 후 , 추가 , 계속 수행 필요

충돌 발생 후 해결 절차

1. 파일수정
2. 파일 추가 → git add <수정 파일>
3. rebase 계속 수행,마지막 메시지 수정 

→ git rebase —continue

## 3-way, fast-forward와 rebase 비교

3-way merge와 rebase 비교

merge

- 여러 분기가 생긴 변경 내용의 **이력이 모두 그대로 남아 있기 때문에 이력이 복잡해짐**

rebase

- 히스토리가 선형으로 단순해지고 **좀 더 깨끗한 이력을 남김**
- 원래의 커밋 이력이 변경됨
- → 정확한 이력을 남겨야 할 필요가 있을 경우에는 사용하면 안됨

fast-forward merge와 rebase 비교

fast-forward merge

- 조상에 위치한 브랜치에서 선행 브랜치의 마지막 이동하는 병합

rebase

- 두 갈래의 브랜치에서
- → 기존의 베이스를 수정
- → 병합할 브랜치 마지막 커밋

3-way 병합

- git checkout master
- git merge experiment

git rebase <newparent> <branch>

일반적 rebase 방법

- topic에서 main을 rebase 한 후 , 다시 main으로 이동 fast-forward 병합 수행
- git checkout topic
- git rebase main
- git checkout main
- git merge topic

다른 rebase 방법 : 어느 브랜치든 main topic 순서로 재배치 방법

- git rebase main topic
- git checkout main
- git merge topic

---

# 9-2 커밋 이력 수정

## 최신 커밋 수정

최근 커밋 메세지 수정

기본 편집기 설정 방법

- git config —global core.editor ‘code—wait’

설정된 편집기로 최근 커밋 메시지 수정

- git commit —amend
- → 새로운 커밋 ID로 수정됨

최근 커밋 메시지를 직접 입력해 수정

- git commit —amend -m “an uppdate commit message”
- → 새로운 커밋 ID로 수정됨

최근 커밋 내용 수정

HEAD의 내용 수정

- 새로운 파일을 추가하거나 파일을 수정한 후
- 새로운 커밋으로 생성하지 않고
- 최신 커밋에 반영
- → 새로운 커밋 ID로 수정됨

커밋 옵션 —amend 사용

- 기본 편집기로 메시지 편집
- git commit —amend

- 명령어 상에 직접 메세지 입력
- git commit —amend -m ‘new message’

- 메시지 수정 없이 다시 커밋 수정
- git commit —amend —no-edit

## rebase -i로 여러 커밋 수정

rebase —interactive 를 사용

작업 공간이 깨끗한 이후, 이전 여러 개의 커밋을 수정

→ 이전 커밋을 다시 작성한 경우 새 ID가 부여

rebase의 —interactive를 사용하여 커밋 시퀀스를 새로운 기본 커밋에 결합

→ git rebase -i HEAD~3

→ git rebase —interactive HEAD~3

→ HEAD~3 : 수정할 커밋의 직전 커밋

→ 실제 HEAD~2 부터 수정 가능

rebase 의 —interactive 주요 명령어

git rebase —interactive HEAD~3

- 기본 편집기로 열리며, HEAD~3이면 HEAD~2,HEAD~1, HEAD  3개의 행 편집ㄱㄴ
- 로그 결과와 다르게 오래된 커밋부터 표시

주요 reabase -i 대화형 명령어

- p (ick) : 해당 커밋을 수정하지 않고 그대로 사용
- r (eword) : 개별 커밋 메시지를 다시 작성
- s (quash) : 계속된 이후 커밋을 이전 커밋에 결합
- d (rop) : 커밋 자체를 삭제

명령 squash 방법

이후 것( 더 최신의 커밋)을 이전 커밋(더 오래된 커밋)에 뭉치는 방법

- 상위에 위치한 커밋에 pick이 있으면서
- 래로 연속적으로 squash 명령
- 다음으로 커밋 E가 커밋 BB에 뭉쳐져 커밋 E가 제거

새로운 커밋 메시지를 입력하는 단계가 있음

- 기본 편집기로 편집
- BB와 E를 합친 커밋 메시지를 지정

최신 4개를 부분 메시지 수정

- [ ]  git rebase —interactive HEAD~4

명령 drop

- [ ]  마지막 커밋 제거
- git rebase —interactive HEAD~2

---

# 9-3 비주얼스튜디오코드에서 깃 활용

## vscode에서 깃 활용 기초

수정 작업 취소

- [ ]  git restore
- [ ]  git restore —staged

작업 영역과 스테이지 영역 파일 수정 취소

- [ ]  명령어 git restore
- [ ]  옵션 —staged : index 파일 unstage ( index를 최근 커밋으로 수정[복사] )
